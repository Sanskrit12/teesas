"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentMessages = exports.utils = exports.authMessages = void 0;
exports.authMessages = {
    userNotFound: 'User not found.',
    loginSuccessfully: 'User login successfully.',
    emailNotRegistered: 'Email not registered.',
    phoneNotRegistered: 'Phone not registered.',
    passwordUpdated: 'Password updated successfully.',
    incorrectPassword: 'Incorrect password.',
    accountDisabled: 'Account is disabled by admin.',
    emailAlreadyUsed: 'Email already in used.',
    phoneAlreadyUsed: 'Phone number already in used.',
    wrongOldPassword: 'Incorrect old password.',
    alreadySetup: 'Profile is already set up.',
    userRegistered: 'User registered successfully',
    emailSent: 'Email sent successfully',
    forgotPasswordMailSend: 'Code sent on your registered email address.',
    failedToFetchUser: 'Failed to fetch user.',
    linkExpired: 'Password reset link expired.',
    passwordResetSuccess: 'Password reset successfully.',
    tokenVerifiedSuccess: 'Token verified successfully.',
    userSuspended: 'Your account has been blocked. Please contact on help@onit.com',
    EmailUsedInSocial: 'This email is linked with another account.',
    invalidCredentials: 'Invalid Credentials',
    otpExpired: 'OTP has expired.',
    otpVerifiedSuccess: 'OTP verified successfully.',
    incorrectOTP: 'Incorrect OTP entered',
    checked: 'Checked',
    locationUpdate: 'Location updated successfully.',
    logOutSuccess: 'Log out successfully',
};
exports.utils = {
    countries_fetched: 'Countries fetched successfully',
    fileUploaded: 'File uploaded successfully',
};
exports.contentMessages = {
    lessonsFetchSuccess: 'Lessons fetch successfully',
    addFavoriteVideoSuccess: 'Add video in favorite successfully',
    chaptersFetchSuccess: 'Chapters fetch successfully',
    subjectFetchSuccess: 'Subjects fetch successfully',
    testFetchSuccess: 'Test fetch successfully',
    reportCardFetchSuccess: 'Report card fetch successfully',
    leaderboardFetchSuccess: 'Leaderboard fetch successfully',
    updatedLeaderboardSuccess: 'Leaderboard updated successfully',
    mockTestFetchSuccess: 'Mock test fetch successfully',
    updatedMockTestSuccess: 'Mock test updated successfully',
    failedToFetchChapter: 'Failed to fetch chapter with this id ',
    failedToFetchsubject: 'Failed to fetch subject',
    failedToFetchLesson: 'Failed to fetch lesson',
    failedToFetchTest: 'Failed to fetch test',
    failedToStudent: 'Failed to fetch student',
    failedToFetchUser: 'Failed to fetch user',
    failedToFetchReportCard: 'Failed to fetch report card',
    updatingLeaderboardFail: 'Failed to update leaderboard sessions',
    checkingLeaderboard: 'error while fetching leaderboard.',
    leaderboardNotFound: 'could not find leaderboard with id provided',
    updatingLeaderboard: 'Error querying for updating leaderboard',
    failedToFetchLeaderboard: 'Failed to fetch leaderboard',
    failedToFetchMockTest: 'Failed to fetch mock test',
    failedToFetchStudents: 'error while fetching students. ',
    failedToFetchSubscription: 'No subscription found.',
    checkingLesson: 'error while fetching lesson ',
    saveReview: 'could not save new review ',
    failedToFetchReview: 'Failed to fetch review',
    updatingMockTestFail: 'Failed to update mock test',
    checkingMockTest: 'error while fetching mock test.',
    checkingTest: 'error while fetching  test.',
    mockTestNotFound: 'could not find mock test with id provided',
    failedToFetchTranscript: 'Failed to fetch transcript',
    failedToFetchMaterial: 'Failed to fetch material',
    coursesFetched: 'Courses Fetched Successfully',
};
//# sourceMappingURL=messages.js.map